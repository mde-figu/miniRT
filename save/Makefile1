# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    Makefile                                           :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: mde-figu <mde-figu@student.42sp.org.br>    +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2021/04/15 18:21:32 by mde-figu          #+#    #+#              #
#    Updated: 2021/06/03 18:56:47 by mde-figu         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

NAME = miniRT

ENTRIES = entries.a
COMPONENTS = components.a
CANVAS_NAME = canvas.a
PARAMETERS_NAME = parameters.a
MAIN = main.c
FILE = teste.rt

HEADERS = include

DIR_SRCS = srcs

DIR_OBJS = objs

DIRS = main parsing elements operations render

SOURCEDIRS = $(foreach dir, $(DIRS), $(addprefix $(DIR_SRCS)/, $(dir)))

# main:			main.c splash.c
#
# parsing:		validate.c validate_triangle.c validate_square.c /
#				validate_sphere.c validate_res.c validate_plane.c /
#				validate_light.c validate_cylinder.c validate_cam.c /
#				validate_amb.c triangle.c square.c sphere.c readnparse.c/
#				plane.c cylinder.c error_list.c mat_par.c config_tr.c /
#				config_sq.c config_sp.c config_res.c config_plane.c /
#				config_lig.c config_cy.c config_cam.c config_amb.c /
#				conf_parameters.c check_normal.c check_coordinate.c /
#				check_color.c
#
# elements:		tuples_1.c tuple_2.c tuple_3.c rays_1.c matrix_1.c matrix_2.c /
#				matrix_3.c matrix_4.c matrix_5.c lights_1.c create_light.c /
#				colors_1.c colors_2.c cam_1.c
#
# operations: 	set_world.c save.c save_bool.c ray_to_pixel.c make_canvas.c/
#				normal_placement.c list_size_world.c list_size_light.c /
#				list_obj.c list_light.c list_img.c list_color.c list_canvas.c /
#				list_cam.c inter_1.c inter_2.c inter_3.c inter_4.c inter_5.c /
#				identity.c ft_power_of.c free_matrix.c free_entry.c /
#				float_compare.c comps.c bubblesort.c atof.c
#				
#
# render:		shader.c render.c ray_hit.c load_screen.c intersect.c /
#				image.c canvas2ppm.c canvas2bmp.c canvas.c 

SOURCES = $(foreach dir,$(SOURCEDIRS),$(wildcard $(dir)/*.c))

OBJS = $(subst $(DIR_SRCS),$(DIR_OBJS),$(SOURCES:.c=.o))

CC	= gcc -g

RM	= rm -rf

CFLAGS	= -Wall -Wextra -Werror -I $(HEADERS)

LIBFT = libft

GNL = get_next_line

GNL_PATH = ./get_next_line

LIBS = minilibx

FLAGS = -L $(LIBFT) -lft

MACOS_MACRO = -D MACOS

LINUX_MACRO = -D LINUX

MACOS_FLAGS	= -L $(LIBS)minilibx_opengl_20191021 -lmlx -framework OpenGL -framework AppKit

LINUX_FLAGS = -L $(LIBS)minilibx-linux -lmlx -lm -lX11 -lXext

UNAME := $(shell uname)

ifeq ($(UNAME),Darwin)
	NUM_THREADS = $(shell sysctl -n hw.ncpu)
	CFLAGS += $(MACOS_MACRO)
	FLAGS += $(MACOS_FLAGS)
endif
ifeq ($(UNAME),Linux)
	NUM_THREADS = $(shell nproc --all)
	CFLAGS += $(LINUX_MACRO)
	FLAGS += $(LINUX_FLAGS)
endif

ifeq ($(SANITIZE_A),true)
	CFLAGS += -fsanitize=address
endif

ifeq ($(SANITIZE_L),true)
	CFLAGS += -fsanitize=leak
endif

$(NAME): $(OBJS)
		@make -C $(LIBFT)
		-$(CC) $(CFLAGS) $(OBJS) $(FLAGS) $(HEADER) -o $(NAME)

$(DIR_OBJS)/%.o: $(DIR_SRCS)/%.c
#		@sudo /bin/bash mlx.sh
		@mkdir -p objs
		@mkdir -p objs/parsing
		@mkdir -p objs/main
		@mkdir -p objs/elements
		@mkdir -p objs/operations
		@mkdir -p objs/render
		@$(CC) $(CFLAGS) $(HEADER) -c $< -o $@
		@echo "Compiled "$<" successfully!"

all: $(NAME)

clean:
			make clean -C $(LIBFT)
			$(RM) $(OBJS)
			$(RM) $(DIR_OBJS)

fclean:		clean
			make fclean -C $(LIBFT)
			$(RM) $(NAME)
			$(RM) $(DIR_OBJS)

re:			fclean all

PHONY:		all clean fclean re
